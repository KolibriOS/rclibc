cmake_minimum_required(VERSION 3.1)
project(rclibc C)
set(CMAKE_C_STANDARD 90)
if (MSVC)
    add_compile_options(/X)
else ()
    add_compile_options(-fno-builtin -nostdinc)
endif ()
if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    if (MSVC)
        add_compile_options(/Wall)
    else ()
        add_compile_options(-Wall -Wextra -pedantic)
    endif ()
endif ()

include_directories(BEFORE SYSTEM include)

aux_source_directory(libc/assert SRCS)
aux_source_directory(libc/ctype SRCS)
aux_source_directory(libc/errno SRCS)
aux_source_directory(libc/stdio SRCS)
aux_source_directory(libc/stdlib SRCS)
aux_source_directory(libc/string SRCS)
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    aux_source_directory(libc/sysdeps/win32 SRCS)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL Linux)
    aux_source_directory(libc/sysdeps/unix SRCS)
    aux_source_directory(libc/sysdeps/unix/linux SRCS)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL Darwin)
    aux_source_directory(libc/sysdeps/unix SRCS)
    aux_source_directory(libc/sysdeps/unix/darwin SRCS)
else ()
    message(FATAL_ERROR "${CMAKE_SYSTEM_NAME} system is not supported.")
endif ()
add_library(c STATIC ${SRCS})

#add_executable(tassert test/tassert.c)
#target_link_libraries(tassert c)
#
#add_executable(tctype test/tctype.c)
#target_link_libraries(tctype c)
#
#add_executable(terrno test/terrno.c)
#target_link_libraries(terrno c)
#
#add_executable(tfloat test/tfloat.c)
#target_link_libraries(tfloat c)
#
#add_executable(tlimits test/tlimits.c)
#target_link_libraries(tlimits c)
#
#add_executable(tstdarg test/tstdarg.c)
#target_link_libraries(tstdarg c)
#
#add_executable(tstddef test/tstddef.c)
#target_link_libraries(tstddef c)
#
#enable_testing()
#add_test(NAME tassert COMMAND tassert)
#add_test(NAME tctype COMMAND tctype)
#add_test(NAME terrno COMMAND terrno)
#add_test(NAME tfloat COMMAND tfloat)
#add_test(NAME tlimits COMMAND tlimits)
#add_test(NAME tstdarg COMMAND tstdarg)
#add_test(NAME tstddef COMMAND tstddef)
